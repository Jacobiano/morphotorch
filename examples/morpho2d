import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.optim.lr_scheduler import StepLR
from typing import List

def dilation2D(x,kernel):
  #Channelwise Dilation (Marginal)
  se_h, se_w = kernel.shape[-2],kernel.shape[-1]
  origin = [se_h // 2, se_w // 2]
  # pad
  pad_e: List[int] = [origin[1], se_w - origin[1] - 1, origin[0], se_h - origin[0] - 1]
  border_value = -1e4
  border_type = 'constant'
  output = F.pad(x, pad_e, mode=border_type, value=border_value)
  output = output.unfold(2, se_h, 1).unfold(3, se_w, 1)
  output, _ = torch.max(output + kernel, 4)
  output, _ = torch.max(output, 4)
  return output

def erosion2D(image,SE):
   return -dilation2D(-image, torch.flip(SE,[5,4])) #B,C,W1,W2,h,w

class DilationLayer(nn.Module):
    """ DilationLayer """
    def __init__(self, input_dim,kernel_size):
        super().__init__()
        struct_element = torch.Tensor(1,input_dim,1,1,kernel_size[0],kernel_size[1]) #B,C,W1,W2,h,w
        self.struct_element = nn.Parameter(struct_element)

        # initialize structuring element
        nn.init.uniform_(self.struct_element,a=-1.,b=0.) # weight init
        
    def forward(self, x):
        return dilation2D(x,self.struct_element)
    
class ErosionLayer(nn.Module):
    """ ErosionLayer """
    def __init__(self, input_dim,kernel_size):
        super().__init__()
        struct_element = torch.Tensor(1,input_dim,1,1,kernel_size[0],kernel_size[1]) #B,C,W1,W2,h,w
        self.struct_element = nn.Parameter(struct_element)

        # initialize structuring element
        nn.init.uniform_(self.struct_element,a=-1.,b=0.) # weight init
        
    def forward(self, x):
        return erosion2D(x,self.struct_element)

class OpeningLayer(nn.Module):
    """ OpeningLayer """
    def __init__(self, input_dim,kernel_size):
        super().__init__()
        struct_element = torch.Tensor(1,input_dim,1,1,kernel_size[0],kernel_size[1]) #B,C,W1,W2,h,w
        self.struct_element = nn.Parameter(struct_element)

        # initialize structuring element
        nn.init.uniform_(self.struct_element,a=-1.,b=0.) # weight init
        
    def forward(self, x):
        return dilation2D(erosion2D(x,self.struct_element),self.struct_element)
    
class ClosingLayer(nn.Module):
    """ ClosingLayer """
    def __init__(self, input_dim,kernel_size):
        super().__init__()
        struct_element = torch.Tensor(1,input_dim,1,1,kernel_size[0],kernel_size[1]) #B,C,W1,W2,h,w
        self.struct_element = nn.Parameter(struct_element)

        # initialize structuring element
        nn.init.uniform_(self.struct_element,a=-1.,b=0.) # weight init
        
    def forward(self, x):
        return erosion2D(dilation2D(x,self.struct_element),self.struct_element)

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1)
        self.dilation = DilationLayer(input_dim=32,kernel_size=(3,3))
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.dropout1 = nn.Dropout(0.25)
        self.dropout2 = nn.Dropout(0.5)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.conv1(x)
        x =self.dilation(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.dropout1(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.dropout2(x)
        x = self.fc2(x)
        output = F.log_softmax(x, dim=1)
        return output


def train(model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % 100 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))
            print('**********************')
            #print(model.dilation.struct_element)

def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))